"use client"

import { useEffect, useState, useCallback } from "react"
import { useTranslations } from "next-intl"
import { 
  Tag, 
  Search, 
  Plus, 
  Edit, 
  Trash2, 
  Eye, 
  X
} from "lucide-react"
import { useAdmin } from "@/contexts/AdminContext"
import type { ServiceCategory } from '@/types/database' // Assuming this is the path

export default function AdminCategoriesPage() {
  const t = useTranslations('admin')
  const { 
    categories, 
    loadCategories, 
    createCategory,
    updateCategory, 
    deleteCategory, 
    loading, 
    error 
  } = useAdmin()

  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<ServiceCategory | null>(null)
  const [editingCategory, setEditingCategory] = useState<ServiceCategory | null>(null)
  
  const [showDetailsModal, setShowDetailsModal] = useState(false)
  const [showDeleteModal, setShowDeleteModal] = useState(false)
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [showEditModal, setShowEditModal] = useState(false)

  // Simplified form state for create/edit
  const [formData, setFormData] = useState({
    name: "",
    description: "",
  })

  useEffect(() => {
    loadCategories()
  }, [loadCategories])

  const filteredCategories = categories.filter(category => {
    const matchesSearch = category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (category.description && category.description.toLowerCase().includes(searchTerm.toLowerCase()))
    
    return matchesSearch
  })

  const resetForm = () => {
    setFormData({ name: "", description: "" })
  }

  const handleCreateCategory = async () => {
    if (!formData.name) return;
    try {
      // The ID is often generated by the backend/database, but we follow the original logic
      const categoryId = `category_${Date.now()}` 
      // await createCategory(categoryId, {
      //   name: formData.name,
      //   description: formData.description || undefined, // Send undefined if empty
      //   createdAt: new Date().toISOString()
      // })
      setShowCreateModal(false)
      resetForm()
    } catch (error) {
      console.error('Error creating category:', error)
      // Here you might want to set an error state to show in the UI
    }
  }

  const handleUpdateCategory = async () => {
    if (!editingCategory) return;
    try {
      await updateCategory(editingCategory.id, {
        name: formData.name,
        description: formData.description || undefined,
      })
      setShowEditModal(false)
      setEditingCategory(null)
      resetForm()
    } catch (error) {
      console.error('Error updating category:', error)
    }
  }

  const handleDeleteCategory = async () => {
    if (!selectedCategory) return;
    try {
      await deleteCategory(selectedCategory.id)
      setShowDeleteModal(false)
      setSelectedCategory(null)
    } catch (error) {
      console.error('Error deleting category:', error)
    }
  }

  const openEditModal = (category: ServiceCategory) => {
    setEditingCategory(category)
    setFormData({
      name: category.name,
      description: category.description || "",
    })
    setShowEditModal(true)
  }

  const openDetailsModal = (category: ServiceCategory) => {
    setSelectedCategory(category)
    setShowDetailsModal(true)
  }

  const openDeleteModal = (category: ServiceCategory) => {
    setSelectedCategory(category)
    setShowDeleteModal(true)
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Tag className="h-8 w-8 text-blue-500 animate-pulse mx-auto mb-4" />
          <p className="text-gray-600">Загрузка категорий...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Управление категориями</h1>
            <p className="text-gray-600 mt-1">Просмотр и управление категориями услуг</p>
          </div>
          <button 
            onClick={() => {
              resetForm()
              setShowCreateModal(true)
            }}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center"
          >
            <Plus className="h-4 w-4 mr-2" />
            Добавить категорию
          </button>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="relative md:col-span-2">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Поиск по названию или описанию..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              <div className="flex items-center text-sm text-gray-500">
                Найдено: {filteredCategories.length} категорий
              </div>
            </div>
          </div>
        </div>

        {/* Categories Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCategories.map((category) => (
            <div key={category.id} className="bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-200 flex flex-col">
              <div className="p-6 flex-grow">
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  {category.name}
                </h3>
                <p className="text-sm text-gray-600 mb-4 line-clamp-2 flex-grow">
                  {category.description || <span className="italic">Нет описания</span>}
                </p>
              </div>
              <div className="border-t border-gray-200 p-4 flex items-center justify-between">
                <button
                  onClick={() => openDetailsModal(category)}
                  className="text-blue-600 hover:text-blue-900 text-sm font-medium flex items-center"
                >
                  <Eye className="h-4 w-4 mr-1" />
                  Подробнее
                </button>
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => openEditModal(category)}
                    className="p-1 text-blue-600 hover:bg-blue-50 rounded"
                    title="Редактировать"
                  >
                    <Edit className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => openDeleteModal(category)}
                    className="p-1 text-red-600 hover:bg-red-50 rounded"
                    title="Удалить"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {filteredCategories.length === 0 && !loading && (
          <div className="text-center py-12">
            <Tag className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Категории не найдены</h3>
            <p className="text-gray-500">Попробуйте изменить параметры поиска или добавить новую категорию.</p>
          </div>
        )}
      </div>

      {/* Create or Edit Modal */}
      {(showCreateModal || showEditModal) && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">
                  {showEditModal ? 'Редактировать категорию' : 'Создать категорию'}
                </h3>
                <button
                  onClick={() => {
                    setShowCreateModal(false)
                    setShowEditModal(false)
                  }}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
              
              <div className="space-y-4">
                <div>
                  <label htmlFor="category-name" className="block text-sm font-medium text-gray-700 mb-2">
                    Название <span className="text-red-500">*</span>
                  </label>
                  <input
                    id="category-name"
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Введите название категории"
                  />
                </div>

                <div>
                  <label htmlFor="category-description" className="block text-sm font-medium text-gray-700 mb-2">
                    Описание
                  </label>
                  <textarea
                    id="category-description"
                    value={formData.description}
                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Введите описание (необязательно)"
                  />
                </div>
              </div>

              <div className="flex justify-end space-x-3 mt-6">
                <button
                  onClick={() => {
                    setShowCreateModal(false)
                    setShowEditModal(false)
                  }}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md"
                >
                  Отмена
                </button>
                <button
                  onClick={showEditModal ? handleUpdateCategory : handleCreateCategory}
                  disabled={!formData.name}
                  className="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed rounded-md"
                >
                  {showEditModal ? 'Сохранить' : 'Создать'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Details Modal */}
      {showDetailsModal && selectedCategory && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-gray-900">Информация о категории</h3>
                <button
                  onClick={() => setShowDetailsModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <X className="h-6 w-6" />
                </button>
              </div>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-500">Название</label>
                  <p className="text-md text-gray-900">{selectedCategory.name}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Описание</label>
                  <p className="text-md text-gray-900">{selectedCategory.description || "Нет описания"}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">ID</label>
                  <p className="text-xs text-gray-700 bg-gray-100 p-2 rounded">{selectedCategory.id}</p>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Дата создания</label>
                  <p className="text-md text-gray-900">{new Date(selectedCategory.createdAt).toLocaleString()}</p>
                </div>
              </div>
              <div className="flex justify-end mt-6">
                <button
                  onClick={() => setShowDetailsModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md"
                >
                  Закрыть
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Delete Confirmation Modal */}
      {showDeleteModal && selectedCategory && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-20 mx-auto p-5 border w-full max-w-sm shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
                <Trash2 className="h-6 w-6 text-red-600" />
              </div>
              <h3 className="text-lg font-medium text-gray-900 text-center mb-2">
                Удалить категорию
              </h3>
              <p className="text-sm text-gray-500 text-center mb-6">
                Вы уверены, что хотите удалить категорию <strong>{selectedCategory.name}</strong>? 
                Это действие нельзя отменить.
              </p>
              <div className="flex justify-center space-x-3">
                <button
                  onClick={() => setShowDeleteModal(false)}
                  className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md w-full"
                >
                  Отмена
                </button>
                <button
                  onClick={handleDeleteCategory}
                  className="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-md w-full"
                >
                  Удалить
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}