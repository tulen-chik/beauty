import { endAt as fbEndAt, get, orderByChild, query, ref, startAt as fbStartAt, equalTo } from 'firebase/database';

import { createOperation, deleteOperation,readOperation, updateOperation } from './crud';
import { db } from './init';
import { appointmentSchema } from './schemas';

import type { Appointment, AppointmentStatus } from '@/types/database';

export const appointmentOperations = {
  create: (salonId: string, appointmentId: string, data: Omit<Appointment, 'id'>) =>
    createOperation(`appointments/${salonId}/${appointmentId}`, data, appointmentSchema),

  read: (salonId: string, appointmentId: string) =>
    readOperation<Appointment>(`appointments/${salonId}/${appointmentId}`),

  update: (salonId: string, appointmentId: string, data: Partial<Appointment>) =>
    updateOperation(`appointments/${salonId}/${appointmentId}`, data, appointmentSchema),

  delete: (salonId: string, appointmentId: string) =>
    deleteOperation(`appointments/${salonId}/${appointmentId}`),

  listBySalon: async (
    salonId: string,
    opts?: {
      startAt?: string;
      endAt?: string;
      status?: AppointmentStatus;
      employeeId?: string;
      serviceId?: string;
      customerUserId?: string;
    }
  ): Promise<Appointment[]> => {
    try {
      console.log(`üìä listBySalon called:`, { salonId, opts });

      const baseRef = ref(db, `appointments/${salonId}`);
      let snapshot;
      if (opts?.startAt || opts?.endAt) {
        let q = query(baseRef, orderByChild('startAt'));
        if (opts?.startAt) q = query(q, fbStartAt(opts.startAt));
        if (opts?.endAt) q = query(q, fbEndAt(opts.endAt));
        snapshot = await get(q);
      } else {
        snapshot = await get(baseRef);
      }

      if (!snapshot.exists()) {
        console.log(`üìä No appointments found for salon ${salonId}`);
        return [];
      }

      const raw = snapshot.val() as Record<string, Omit<Appointment, 'id'> | Appointment>;
      console.log(`üìä Raw appointments data:`, raw);

      const list: Appointment[] = Object.entries(raw).map(([id, appt]) => {
        const { id: _ignored, ...rest } = (appt as any) ?? {};
        return { id, ...(rest as Omit<Appointment, 'id'>) } as Appointment;
      });

      console.log(`üìä Initial appointments list:`, list);

      const filtered = list.filter((a) => {
        if (opts?.status && a.status !== opts.status) {
          console.log(`üö´ Filtering out appointment ${a.id} (status mismatch: ${a.status} vs ${opts.status})`);
          return false;
        }
        if (opts?.employeeId && a.employeeId !== opts.employeeId) {
          console.log(`üö´ Filtering out appointment ${a.id} (employee mismatch: ${a.employeeId} vs ${opts.employeeId})`);
          return false;
        }
        if (opts?.serviceId && a.serviceId !== opts.serviceId) {
          console.log(`üö´ Filtering out appointment ${a.id} (service mismatch: ${a.serviceId} vs ${opts.serviceId})`);
          return false;
        }
        if (opts?.customerUserId && a.customerUserId !== opts.customerUserId) {
          console.log(`üö´ Filtering out appointment ${a.id} (customer mismatch: ${a.customerUserId} vs ${opts.customerUserId})`);
          return false;
        }
        console.log(`‚úÖ Keeping appointment ${a.id}`);
        return true;
      });

      console.log(`üìä Final filtered appointments: ${filtered.length}`, filtered);
      return filtered;
    } catch (error) {
      console.error(`‚ùå Error in listBySalon:`, error);
      return [];
    }
  },

  listByUser: async (userId: string): Promise<any[]> => {
    try {
      // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–π —É–∑–µ–ª 'appointments', —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ —Å–∞–ª–æ–Ω—ã.
      const appointmentsRef = ref(db, 'appointments');
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–Ω–∏–º–æ–∫ –≤—Å–µ–≥–æ —É–∑–ª–∞ 'appointments'.
      // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —É –≤–∞—Å –º–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π.
      // –î–ª—è –∫—Ä—É–ø–Ω–æ–º–∞—Å—à—Ç–∞–±–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
      const snapshot = await get(appointmentsRef);
  
      if (!snapshot.exists()) {
        console.log(`üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö.`);
        return [];
      }
  
      // –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ salonId.
      const allSalonsData = snapshot.val() as Record<string, Record<string, Appointment>>;
      
      const userAppointments: any[] = [];

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π salonId –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
      for (const salonId in allSalonsData) {
        const salonAppointments = allSalonsData[salonId];
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å (appointmentId) –≤–Ω—É—Ç—Ä–∏ —Å–∞–ª–æ–Ω–∞.
        for (const appointmentId in salonAppointments) {
          const appointment = salonAppointments[appointmentId];

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∑–∞–ø–∏—Å—å –∏—Å–∫–æ–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
          if (appointment.customerUserId === userId) {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤,
            // –æ–±–æ–≥–∞—â–∞—è –µ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º ID –∏ ID —Å–∞–ª–æ–Ω–∞.
            userAppointments.push({
              ...appointment,
              id: appointmentId,
              salonId: salonId 
            });
          }
        }
      }
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userAppointments.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, userAppointments);
      return userAppointments;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ listByUser –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      return [];
    }
  },

  listByDay: async (salonId: string, date: Date): Promise<Appointment[]> => {
    try {
      const dayStart = new Date(date);
      dayStart.setHours(0, 0, 0, 0);
      const dayEnd = new Date(dayStart);
      dayEnd.setDate(dayEnd.getDate() + 1);

      const startIso = dayStart.toISOString();
      const endIso = dayEnd.toISOString();

      console.log(`üìÖ listByDay called:`, {
        salonId,
        date: date.toISOString(),
        dayStart: startIso,
        dayEnd: endIso
      });

      const appointments = await appointmentOperations.listBySalon(salonId, { startAt: startIso, endAt: endIso });
      console.log(`üìÖ listByDay result: ${appointments.length} appointments`, appointments);

      return appointments;
    } catch (error) {
      console.error(`‚ùå Error in listByDay:`, error);
      return [];
    }
  },

  isTimeSlotAvailable: async (
    salonId: string,
    startAtIso: string,
    durationMinutes: number,
    employeeId?: string,
    excludeAppointmentId?: string
  ): Promise<boolean> => {
    try {
      const start = new Date(startAtIso);
      const end = new Date(startAtIso);
      end.setMinutes(end.getMinutes() + durationMinutes);

      console.log(`üîç Checking availability for slot:`, {
        salonId,
        startAtIso,
        start: start.toISOString(),
        end: end.toISOString(),
        durationMinutes,
        employeeId,
        excludeAppointmentId
      });

      // Fetch the day's appointments and check overlaps client-side
      const appts = await appointmentOperations.listByDay(salonId, start);
      console.log(`üìÖ Found ${appts.length} appointments for the day:`, appts);

      const relevant = appts.filter((a) => {
        if (excludeAppointmentId && a.id === excludeAppointmentId) {
          console.log(`üö´ Excluding appointment ${a.id} (excludeAppointmentId)`);
          return false;
        }
        if (employeeId && a.employeeId !== employeeId) {
          console.log(`üö´ Excluding appointment ${a.id} (employee mismatch: ${a.employeeId} vs ${employeeId})`);
          return false;
        }
        // Only consider active bookings
        if (a.status === 'cancelled' || a.status === 'no_show') {
          console.log(`üö´ Excluding appointment ${a.id} (status: ${a.status})`);
          return false;
        }
        console.log(`‚úÖ Including appointment ${a.id} (employee: ${a.employeeId}, status: ${a.status})`);
        return true;
      });

      console.log(`üìä Relevant appointments after filtering: ${relevant.length}`, relevant);

      const overlaps = relevant.some((a) => {
        const aStart = new Date(a.startAt);
        const aEnd = new Date(a.startAt);
        aEnd.setMinutes(aEnd.getMinutes() + a.durationMinutes);
        
        const hasOverlap = aStart < end && start < aEnd;
        
        console.log(`üîç Checking overlap with appointment ${a.id}:`, {
          appointmentStart: aStart.toISOString(),
          appointmentEnd: aEnd.toISOString(),
          requestedStart: start.toISOString(),
          requestedEnd: end.toISOString(),
          hasOverlap
        });
        
        return hasOverlap;
      });

      const isAvailable = !overlaps;
      console.log(`‚úÖ Time slot availability result: ${isAvailable} (overlaps: ${overlaps})`);
      
      return isAvailable;
    } catch (error) {
      console.error(`‚ùå Error checking time slot availability:`, error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return true;
    }
  },
};
